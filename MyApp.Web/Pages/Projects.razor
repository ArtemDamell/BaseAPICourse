@*91.1 Создаём компонент UI пользователя для вывода проектов*@
@page "/projects"
@inject IProjectsScreen _projects

<div class="row">
    <div class="col">
        <h1 class="text-info">Projects list</h1>
    </div>
</div>

@if (projects is null)
{
    <div class="row">
        <div class="col alert alert-alert-info text-center">
            Loading projects ... Please, wait ...
        </div>
    </div>
}
else if (projects.Any())
{
    <div class="row">
        @foreach (var item in projects)
        {
            <div class="col-auto mx-2">
                <div class="card text-center border border-secondary">
                    <div class="card-header">Project ID: @item.Id</div>
                    <div class="card-body text-secondary">
                        <h5 class="card-title">Project name: @item.Name</h5>
                        <p class="card-text">
                            @((item.Tickets?.Count > 0) ? $"Tickets count: {item.Tickets?.Count}" : "")
                        </p>
                        <NavLink class="btn-outline-primary" href="@($"/projects/{item.Id}/tickets")">View all tickets</NavLink>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="row">
        <div class="col alert alert-alert-warning text-center">
            No projects found!
        </div>
    </div>
}


@code {
    // 91.2 Нам понадобится массив для хранения списка проектов
    IEnumerable<Project> projects;

    protected override async Task OnInitializedAsync()
    {
        // 91.3 Получаем данные через класс ProjectScreen
        // Извлекаем интерфейс из этого класса
        projects = await _projects.ViewProjects();

        // 91.4 Конфигурируем зависимость в классе Program
    }
}