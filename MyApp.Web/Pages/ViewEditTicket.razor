@*107. Добавляем новый компонент*@
@*Далее переходим в DisplayTicket и делаем кнопку отображение/редактирование билета*@

@page "/tickets/{ticketId:int}"

@*112.1 Добавить новый маршрут к ViewEditTicket*@
@page "/projects/{projectId:int}/addticket"

@inject ITicketsScreen _db
@inject NavigationManager _navManager

<div class="row">
    <div class="col text-center">
        <h1 class="text-info">Ticket: @TicketId</h1>
    </div>
</div>

@if (ticket is null)
{
    <div class="row">
        <div class="col alert alert-info">
            Loading data ...
        </div>
    </div>
}
else
{
    <AlertMessage @ref="alert" />

    @if (showConfirmation)
    {
        <DeletingConfirmation OnConfirmed="DeleteTicketHandler">
            <ItemInfo>
                <DisplayTicket Ticket="ticket" ShowButtons="false" />
            </ItemInfo>
        </DeletingConfirmation>
    }

    <div class="row">
        <div class="col">
            <EditForm Model="ticket" OnValidSubmit="UpdateHandler">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="titleInput" class="form-label">Title</label>
                    <InputText class="form-control" id="titleInput" @bind-Value="ticket.Title" placeholder="Enter ticket title ..." />
                </div>
                <div class="mb-3">
                    <label for="descriptionInput" class="form-label">Description</label>
                    <InputTextArea class="form-control" id="descriptionInput" @bind-Value="ticket.Description" placeholder="Enter ticket description ..." />
                </div>
                <div class="mb-3">
                    <label for="ownerInput" class="form-label">Owner</label>
                    <InputText class="form-control" id="ownerInput" @bind-Value="ticket.Owner" placeholder="Enter ticket owner ..." readonly />
                </div>
                <div class="mb-3">
                    <label for="eventDateInput" class="form-label">Event date</label>
                    <InputDate class="form-control" id="eventDateInput" @bind-Value="ticket.EventDate" />
                </div>
                <div class="mb-3">
                    <label for="enteredDateInput" class="form-label">Entered date</label>
                    <InputDate class="form-control" id="enteredDateInput" @bind-Value="ticket.EnteredDate" />
                </div>
                <div>
                    <button class="btn @cssClass" type="submit">@buttonNameVar</button>
                    <NavLink class="btn btn-outline-secondary" href="@($"/projects/{ticket.ProjectId}/tickets")">Return to tickets</NavLink>
                    @*116.1 Добавить кнопку удаления в компонент ViewEditTicke*@
                    @if (!ProjectId.HasValue)
                    {
                        <button class="btn btn-outline-danger mx-1" type="button" @onclick="OpenCloseConfirmation">Delete</button>
                    }
                    
                </div>
            </EditForm>
        </div>
    </div>
}


@code {

    // 112.2 Изменить тип на nullable, это будет нашим флагом, мы создаём или редактируем билет
    [Parameter] public int? TicketId { get; set; }
    [Parameter] public int? ProjectId { get; set; }

    Ticket ticket;
    AlertMessage alert;
    bool isValid = true;
    bool showConfirmation;

    // 112.5
    string cssClass = "btn-outline-primary";
    string buttonNameVar = "Update";

    // Мы используем метод OnParametersSet т.к. мы должны быть уверены, что в переменной TicketId уже точно есть значение
    protected override async Task OnParametersSetAsync()
    {
        // 112.3 Добавляем проверку
        if (TicketId.HasValue)
        {
            ticket = await _db.ViewTicketByIdAsync(TicketId.Value);
        }

        if (ProjectId.HasValue && ticket is null)
        {
            ticket = new Ticket { ProjectId = ProjectId };
            cssClass = "btn-outline-success";
            buttonNameVar = "Create";
        }

    }

    async Task UpdateHandler()
    {
        if (!ticket.ValidateDescription())
        {
            alert.ErrorMessage = "Description is REQUIRED";
            alert.Show();
            isValid = false;
        }
        //if (!ticket.ValidateFutureEventDate())
        //{
        //    alert.ErrorMessage = "Event date must be future";
        //    alert.Show();
        //    isValid = false;
        //}
        if (!ticket.ValidateEventDatePresence())
        {
            alert.ErrorMessage = "Event date is REQUIRED";
            alert.Show();
            isValid = false;
        }
        if (!ticket.ValidateEnteredDatePresence())
        {
            alert.ErrorMessage = "Entered date is REQUIRED";
            alert.Show();
            isValid = false;
        }
        //if (!ticket.ValidateEventDateAfterEnteredDate())
        //{
        //    alert.ErrorMessage = "Entered date must be later that Event date";
        //    alert.Show();
        //    isValid = false;
        //}

        if (isValid)
        {
            // 112.4 Изменяем логику для проверки **************************
            //await _db.UpdateTicketAsync(ticket);
            //_navManager.NavigateTo($"/projects/{ticket.ProjectId}/tickets");
            // *****************************************************************

            if (TicketId.HasValue)
                await _db.UpdateTicketAsync(ticket);
            else
                await _db.CreateTicketAsync(ticket);

            _navManager.NavigateTo($"/projects/{ticket.ProjectId}/tickets");
        }
    }

    void OpenCloseConfirmation()
    {
        showConfirmation = !showConfirmation;
    }

    async Task DeleteTicketHandler(bool isConfirmed)
    {
        if (!TicketId.HasValue)
            return;

        if (!isConfirmed)
        {
            OpenCloseConfirmation();
            return;
        }
        
        await _db.DeleteTicketAsync(TicketId.Value);
        _navManager.NavigateTo($"/projects/{ticket.ProjectId}/tickets");
    }
}
